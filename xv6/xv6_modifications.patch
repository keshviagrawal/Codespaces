--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 # To compile the kernel and user programs
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb
+CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb $(SCHEDULER_FLAGS)
 
 # To compile with gcc
 CFLAGS += -gdwarf-2
@@ -7,6 +7,15 @@ CFLAGS += -gdwarf-2
 # To compile with clang
 CFLAGS += -Wno-unused-value -Wno-unused-parameter
 
+# Scheduler compilation flags
+ifeq ($(SCHEDULER),FCFS)
+	SCHEDULER_FLAGS = -DFCFS
+endif
+ifeq ($(SCHEDULER),CFS)
+	SCHEDULER_FLAGS = -DCFS
+endif
+
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
 CFLAGS += -fno-pie
@@ -51,6 +60,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_readcount\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,7 @@ void            ramdiskrw(struct buf*);
 int             readi(struct inode*, int, uint64, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, int, uint64, uint, uint);
+uint64          getreadcount(void);
 void            itimer(void);
 
 // kalloc.c
@@ -120,6 +121,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            scheduler(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -86,6 +86,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   enum procstate state;        // Process state
+  
+  // For FCFS scheduler
+  uint64 creation_time;        // Process creation time
+  
+  // For CFS scheduler
+  int nice;                    // Nice value (-20 to 19)
+  uint64 vruntime;             // Virtual runtime
 };
 
 // Process memory is laid out contiguously, low addresses first:
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "syscall.h"
 
 struct cpu cpus[NCPU];
 
@@ -12,6 +13,8 @@ struct cpu cpus[NCPU];
 struct proc proc[NPROC];
 
 struct proc *initproc;
+uint64 total_bytes_read = 0;  // Global counter for read bytes
+uint64 system_ticks = 0;      // Global tick counter for creation time
 
 int nextpid = 1;
 struct spinlock pid_lock;
@@ -30,6 +33,7 @@ allocproc(void)
   struct proc *p;
 
   for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
     if(p->state == UNUSED) {
       goto found;
     } else {
@@ -37,6 +41,7 @@ allocproc(void)
     }
   }
   release(&p->lock);
+  release(&p->lock);
   return 0;
 
 found:
@@ -50,6 +55,12 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  // Initialize scheduler-specific fields
+  p->creation_time = system_ticks++;
+  p->nice = 0;  // Default nice value
+  p->vruntime = 0;  // Initialize virtual runtime
+
   return p;
 }
 
@@ -123,6 +134,7 @@ fork(void)
   np->sz = p->sz;
 
   np->parent = p;
+  np->creation_time = system_ticks++;
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
@@ -138,6 +150,7 @@ fork(void)
   // increment reference counts on open file descriptors.
   for(i = 0; i < NOFILE; i++)
     if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
@@ -155,6 +168,7 @@ fork(void)
   return pid;
 }
 
+// Get total bytes read by read() system call
+uint64
+getreadcount(void)
+{
+  return total_bytes_read;
+}
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -458,6 +472,7 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
+  int time_slice = 0;
   
   c->proc = 0;
   for(;;){
@@ -465,6 +480,7 @@ scheduler(void)
     // Enable interrupts on this processor.
     sti();
 
+#ifdef FCFS
     // FCFS Scheduler Implementation
     struct proc *selected = 0;
     uint64 earliest_time = UINT64_MAX;
@@ -480,6 +496,7 @@ scheduler(void)
         if(p->state == RUNNABLE) {
           if(p->creation_time < earliest_time) {
             earliest_time = p->creation_time;
+            selected = p;
           }
         }
       }
@@ -487,6 +504,7 @@ scheduler(void)
     }
 
     if(selected) {
+      // Switch to chosen process
       c->proc = selected;
       selected->state = RUNNING;
       swtch(&c->context, &selected->context);
@@ -494,6 +512,7 @@ scheduler(void)
       c->proc = 0;
     }
+#endif
 
+#ifdef CFS
     // CFS Scheduler Implementation
     struct proc *selected = 0;
     uint64 min_vruntime = UINT64_MAX;
@@ -501,6 +520,7 @@ scheduler(void)
     int runnable_count = 0;
     
     // Count runnable processes and find minimum vruntime
+    acquire(&wait_lock);
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
@@ -508,6 +528,7 @@ scheduler(void)
         if(p->vruntime < min_vruntime) {
           min_vruntime = p->vruntime;
           selected = p;
+        }
         }
       }
       release(&p->lock);
@@ -515,6 +536,7 @@ scheduler(void)
     release(&wait_lock);
 
     if(selected) {
+      // Calculate time slice
       int target_latency = 48;
       time_slice = target_latency / runnable_count;
       if(time_slice < 3) time_slice = 3;
@@ -522,6 +544,7 @@ scheduler(void)
       // Log scheduling decision
       printf("[Scheduler Tick]\n");
       for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
         if(p->state == RUNNABLE) {
           printf("PID: %d | vRuntime: %d\n", p->pid, p->vruntime);
         }
@@ -529,6 +552,7 @@ scheduler(void)
         release(&p->lock);
       }
       printf("--> Scheduling PID %d (lowest vRuntime)\n", selected->pid);
+      
       // Switch to chosen process
       c->proc = selected;
       selected->state = RUNNING;
@@ -536,6 +560,7 @@ scheduler(void)
       // Update vruntime after time slice
       selected->vruntime += time_slice;
       c->proc = 0;
+    }
     }
+#endif
 
     // Default Round Robin Scheduler (when no scheduler is specified)
+#ifndef FCFS
+#ifndef CFS
     // Loop over process table looking for process to run.
     acquire(&wait_lock);
     for(p = proc; p < &proc[NPROC]; p++) {
@@ -550,6 +575,7 @@ scheduler(void)
     }
     release(&wait_lock);
+#endif
+#endif
   }
 }
 
@@ -560,6 +586,7 @@ sched(void)
   if(!holding(&p->lock))
     panic("sched p->lock");
   if(mycpu()->noff != 1)
+    panic("sched locks");
     panic("sched locks");
   if(p->state == RUNNING)
     panic("sched running");
@@ -570,6 +597,7 @@ sched(void)
   swtch(&p->context, &mycpu()->context);
   mycpu()->intena = intena;
 }
+
 // Give up the CPU for one scheduling round.
 void
 yield(void)
@@ -577,6 +605,7 @@ yield(void)
   struct proc *p = myproc();
   acquire(&p->lock);
   p->state = RUNNABLE;
+  sched();
   sched();
   release(&p->lock);
 }
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_getreadcount(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +128,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getreadcount] sys_getreadcount,
 [SYS_trace]   sys_trace,
 [SYS_sysinfo] sys_sysinfo,
 };
@@ -140,6 +142,7 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // printf("%d %s: unknown sys call %d\n",
     //        p->pid, p->name, num);
+    p->trapframe->a0 = syscalls[num]();
     p->trapframe->a0 = syscalls[num]();
   } else {
     printf("%d %s: unknown sys call %d\n",
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,6 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getreadcount 22
 #define SYS_trace  23
 #define SYS_sysinfo 24
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -484,6 +484,7 @@ sys_read(void)
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
     return -1;
 
+  total_bytes_read += n;
   return fileread(f, p, n);
 }
 
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,6 +89,12 @@ sys_uptime(void)
   return xtime;
 }
 
+uint64
+sys_getreadcount(void)
+{
+  return getreadcount();
+}
+
 uint64
 sys_trace(void)
 {
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getreadcount(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,6 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getreadcount");
 entry("trace");
 entry("sysinfo");
 
--- a/user/readcount.c
+++ b/user/readcount.c
@@ -0,0 +1,30 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int initial_count, final_count;
+  int fd;
+  char buffer[100];
+  
+  // Get initial read count
+  initial_count = getreadcount();
+  printf("Initial read count: %d bytes\n", initial_count);
+  
+  // Create a test file and read from it
+  fd = open("README", 0);
+  if(fd < 0) {
+    printf("Error: Could not open README file\n");
+    exit(1);
+  }
+  
+  // Read 100 bytes
+  if(read(fd, buffer, 100) != 100) {
+    printf("Error: Could not read 100 bytes\n");
+    close(fd);
+    exit(1);
+  }
+  
+  close(fd);
+  
+  // Get final read count
+  final_count = getreadcount();
+  printf("Final read count: %d bytes\n", final_count);
+  printf("Bytes read in this test: %d\n", final_count - initial_count);
+  
+  exit(0);
+}
